---
import Layout from "../layouts/Layout.astro";
import CardOfInterest from "../components/CardOfInterest.astro";
import {
    setupMultilangPage,
    getSection,
    getLocalizedProperty,
} from "../multilang";
import { locale_cookie } from "../multilang-store";
import { getCollection } from "astro:content";

await setupMultilangPage(
    "pages",
    "home",
    Astro.cookies.get(locale_cookie)?.value,
    Astro.preferredLocale,
);

const interests = await getCollection("interests");
---

<Layout title="Doty.hu" menuHidden={true}>
    <div
        class="flex flex-col items-center justify-center min-h-screen text-center px-4"
    >
        <h1
            class="text-4xl md:text-6xl font-bold mb-16 flex max-sm:flex-col sm:flex-row sm:justify-center"
            id="whats_that"
        >
            <span class="sm:pr-4">{getSection("landing-o")} </span>
            <span>{getSection("landing-what-is")}</span>
        </h1>

        <div class="relative w-32 h-32 md:w-48 md:h-48 mb-16" id="dot">
            <div class="w-full h-full bg-white rounded-full"></div>
        </div>

        <div class="space-y-8">
            <h2
                class="text-3xl md:text-5xl font-bold flex max-sm:flex-col sm:flex-row sm:justify-center"
                id="that_is"
            >
                <span class="sm:pr-4">{getSection("landing-that-is")}</span>
                <span>{getSection("landing-dot")}</span>
            </h2>
            <div
                class="text-xl md:text-2xl mx-auto flex flex-col items-center"
                id="navbar-toggle"
            >
                <p id="loves-comp">{getSection("landing-loves")}</p>
                <p id="help-others">{getSection("landing-help")}</p>
            </div>
        </div>
    </div>

    <!-- Introduction Section with large spacing -->
    <div
        class="min-h-screen flex flex-col items-center justify-center text-center px-4 py-42"
    >
        <div class="max-w-4xl mx-auto space-y-28">
            <!-- Bible Quote -->
            <div class="space-y-4 font-[Lato]">
                <p
                    class="text-3xl md:text-5xl italic font-light"
                    set:html={getSection("quote")}
                />
                <p class="text-3xl font-bold">{getSection("quote-ref")}</p>
            </div>

            <!-- Personal Introduction -->
            <div class="space-y-12">
                <h2 class="text-4xl md:text-5xl font-bold">
                    {getSection("hi")}
                </h2>

                <div class="space-y-8 text-lg md:text-xl">
                    <p set:html={getSection("about-start")} />
                    <div>
                        <p>
                            {getSection("about-above")}<br />
                            <span
                                class="font-bold text-xl md:text-2xl my-4"
                                set:html={getSection("about-better-place")}
                            /><br />
                        </p>
                        <p set:html={getSection("about-continue")} />
                    </div>
                </div>
            </div>
        </div>

        <!-- Cards Section -->
        <div
            class="min-h-screen flex flex-col items-center justify-center px-4 py-32"
        >
            <div class="w-[80%] max-w-7xl mx-auto">
                <h2 class="text-4xl md:text-5xl font-bold text-center mb-16">
                    {getSection("some-details")}
                </h2>

                <div class="relative">
                    <!-- Navigation Arrows -->
                    <button
                        class="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-12 w-10 h-10 bg-white rounded-full flex items-center justify-center text-black hover:opacity-70 transition-opacity"
                        aria-label="Previous slide"
                        id="prev"
                    >
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            class="w-6 h-6"
                        >
                            <path d="m15 18-6-6 6-6"></path>
                        </svg>
                    </button>

                    <!-- Cards Container -->
                    <div
                        class="grid max-md:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 overflow-hidden"
                    >
                        {
                            interests.map((interest, index) => (
                                <div id={`card-${index + 1}`} class="card">
                                    <CardOfInterest
                                        title={getLocalizedProperty(
                                            interest.data.title,
                                        )}
                                        content={getLocalizedProperty(
                                            interest.data.description,
                                        )}
                                        image={interest.data.image}
                                        link={interest.data.link}
                                    />
                                </div>
                            ))
                        }
                    </div>

                    <button
                        class="absolute right-0 top-1/2 -translate-y-1/2 translate-x-12 w-10 h-10 bg-white rounded-full flex items-center justify-center text-black hover:opacity-70 transition-opacity"
                        aria-label="Next slide"
                        id="next"
                    >
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            class="w-6 h-6"
                        >
                            <path d="m9 18 6-6-6-6"></path>
                        </svg>
                    </button>

                    <!-- Dots -->
                    <div class="bg-[#00A3FF] hidden"></div>
                    <div class="flex justify-center gap-2 mt-8" id="dots"></div>
                </div>
            </div>
        </div>
    </div>

    <script lang="javascript" define:vars={{ cardNumber: interests.length }}>
        const navbar = document.querySelector("#navbar");

        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (!entry.isIntersecting) {
                    navbar.classList.remove("opacity-0");
                    navbar.classList.add("opacity-100");
                } else {
                    navbar.classList.add("opacity-0");
                    navbar.classList.remove("opacity-100");
                }
            });
        });

        observer.observe(document.querySelector("#navbar-toggle"));

        let displayedCards = 3;
        let currentPage = 0;

        function generateCardNav() {
            const cards = document.querySelectorAll(".card");
            const dots = document.querySelector("#dots");

            dots.innerHTML = "";

            for (let i = 0; i < Math.ceil(cardNumber / displayedCards); i++) {
                const dot = document.createElement("div");
                dot.id = `dot-${i}`;
                dot.classList.add(
                    "w-2",
                    "h-2",
                    "rounded-full",
                    `bg-${i === currentPage ? "[#00A3FF]" : "white"}`,
                );
                dots.appendChild(dot);
            }
        }

        function displayCards() {
            const cards = document.querySelectorAll(".card");
            cards.forEach((card, index) => {
                if (
                    index >= currentPage * displayedCards &&
                    index < (currentPage + 1) * displayedCards
                ) {
                    card.classList.remove("hidden");
                } else {
                    card.classList.add("hidden");
                }
            });
        }

        document.getElementById("prev").addEventListener("click", (_) => {
            if (currentPage > 0) {
                currentPage--;
                generateCardNav();
                displayCards();
            }
        });

        document.getElementById("next").addEventListener("click", (_) => {
            if (currentPage < Math.round(cardNumber / displayedCards) - 1) {
                currentPage++;
                generateCardNav();
                displayCards();
            }
        });

        const size_content = (_) => {
            let width = window.innerWidth;
            if (width < 768) {
                // under md => single item
                displayedCards = 1;
            } else if (width < 1024) {
                // under lg => two items
                displayedCards = 2;
            } else {
                // three items
                displayedCards = 3;
            }
            generateCardNav();
            displayCards();
        };
        window.addEventListener("resize", size_content);
        document.addEventListener("DOMContentLoaded", size_content);
    </script>

    <style>
        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }

        @keyframes typing {
            from {
                width: 0;
            }
            to {
                width: 100%;
            }
        }

        #dot {
            animation: fadeIn 1s ease-in-out;
        }

        #whats_that,
        #that_is,
        #loves-comp,
        #help-others {
            @apply relative w-[max-content] before:absolute;
            content: var(--tw-content);
            overflow: hidden;
            white-space: nowrap;
            width: 0;
            animation: typing 2.5s steps(50) 1s 1 normal forwards;
        }

        #that_is {
            animation-delay: 4s;
        }

        #loves-comp {
            animation-delay: 6s;
        }
        #help-others {
            animation-delay: 7s;
        }
    </style>
</Layout>
